//
const publicSpreadsheetUrl = '1adVPf-p0RFSg4UKuQEPl2X8ACaMfzjIdW0DSZwxV3Ss'

Plotly.setPlotConfig({locale: 'uk'})

console.log('Reading data')

Tabletop.init({ 
  key: publicSpreadsheetUrl,
  simpleSheet: false,
  callback: (data) => {
    data = data['4210'].elements
    processData(data)
  }
})

const processData = data => {
  console.log('Processing data')
  data = data.map(el => {
    el['Дата народження'] = normalizeDate(el['Дата народження'])
    el['Дата смерті'] = normalizeDate(el['Дата смерті'])
    return el
  })
  getGroups(data)
}

let regions, birthDates, deathDates, statuses, forces, position
const getGroups = data => {
  console.log('Making groups')
  regions = groupBy(data, 'Регіон народження')
  regions = sortBy(regions, 'value')

  birthDates = groupByMonth(data, 'Дата народження')
  birthDates = sortBy(birthDates, 'value')

  deathDates = groupByMonth(data, 'Дата смерті')
  deathDates = sortBy(deathDates, 'value')

  statuses = groupBy(data, 'Військове звання')
  statuses = sortBy(statuses, 'value')

  forces = groupBy(data, 'Силова структура')
  forces = sortBy(forces, 'value')

  positions = groupBy(data, 'Посада')
  positions = sortBy(positions, 'value')

  makePlots()
}

const makePlots = () => {
  console.log('Making plots')
  let byRegionPlot = () => {
    let plotData = {
      x: regions.map(el => el.value),
      y: regions.map(el => el.key),
      orientation: 'h',
      type: 'bar'
    }
    let layout = {
      title: 'Розподіл за регіоном народження',
      barmode: 'stack',
      height: 600,
      autosize: true,
      legend: { orientation: 'h' },
      margin: { autoexpand: true, l: 400, r: 120, t: 100 }
    }
    Plotly.newPlot('regionPlot', [plotData], layout)
  }
  byRegionPlot()

  let byStatusesPlot = () => {
    let plotData = {
      x: statuses.map(el => el.value),
      y: statuses.map(el => el.key),
      orientation: 'h',
      type: 'bar'
    }
    let layout = {
      title: 'Розподіл за званням',
      barmode: 'stack',
      height: 2000,
      autosize: true,
      legend: { orientation: 'h' },
      margin: { autoexpand: true, l: 400, r: 120, t: 100 }
    }
    Plotly.newPlot('statusPlot', [plotData], layout)
  }
  byStatusesPlot()

  let byForcesPlot = () => {
    let plotData = {
      x: forces.map(el => el.value),
      y: forces.map(el => el.key),
      orientation: 'h',
      type: 'bar'
    }
    let layout = {
      title: 'Розподіл за силовою структурою',
      barmode: 'stack',
      height: 600,
      autosize: true,
      legend: { orientation: 'h' },
      margin: { autoexpand: true, l: 400, r: 120, t: 100 }
    }
    Plotly.newPlot('forcePlot', [plotData], layout)
  }
  byForcesPlot()

  let byPositionsPlot = () => {
    let plotData = {
      x: positions.map(el => el.value),
      y: positions.map(el => el.key),
      orientation: 'h',
      type: 'bar'
    }
    let layout = {
      title: 'Розподіл за посадою',
      barmode: 'stack',
      height: 10000,
      autosize: true,
      legend: { orientation: 'h' },
      margin: { autoexpand: true, l: 400, r: 120, t: 100 }
    }
    Plotly.newPlot('positionPlot', [plotData], layout)
  }
  byPositionsPlot()

  let byBirthDates = () => {
    let plotData = {
      x: birthDates.map(el => el.key),
      y: birthDates.map(el => el.value),
      stackgroup: 'first',
      name: birthDates.map(el => el.value)
    }

    let layout = {
      title: 'Кількість загиблих за датою народження',
      height: 600,
      autosize: true,
      legend: {
        orientation: 'h'
      }
    }

    Plotly.newPlot('birthDatesPlot',[plotData], layout)
  }
  byBirthDates()

  let byDeathDates = () => {
    let plotData = {
      x: deathDates.map(el => el.key),
      y: deathDates.map(el => el.value),
      stackgroup: 'first',
      name: deathDates.map(el => el.value)
    }

    let layout = {
      title: 'Кількість загиблих за датою смерті',
      height: 600,
      autosize: true,
      legend: {
        orientation: 'h'
      }
    }

    Plotly.newPlot('deathDatesPlot',[plotData], layout)
  }
  byDeathDates()

}



// Helpers

const normalizeDate = str => str.replace(/(\d{2})\.(\d{2})\.(\d{4})/, '$3-$2-$1')

const groupBy = (data, key) => {
  let result = data.reduce((acc, val) => {
    acc[val[key]] = (val[key] in acc) ? acc[val[key]] + 1 : 1;
    return acc
  }, {})
  result = Object.entries(result).map(el => ({ key: el[0], value: el[1] }))
  return result
}

const groupByMonth = (data, key) => {
  let result = data.reduce((acc, val) => {
    let newkey = val[key].replace(/\d{2}$/, '01')
    acc[newkey] = (newkey in acc) ? acc[newkey] + 1 : 1;
    return acc
  }, {})
  result = Object.entries(result).map(el => ({ key: new Date(el[0]), value: el[1] }))
  return result
}

const sortBy = (data, key, desc = true) => {
  return data.sort((a, b) => {
    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;
    if (typeof a[key] === 'string' && typeof b[key] === 'string') {
      return desc ? a[key].localeCompare(b[key]) : b[key].localeCompare(a[key])
    }
    return desc ? a[key] - b[key] : b[key] - a[key]
  })
}

/*

let byDate = () => {
  let dates = ['1990-01-01', '1990-04-01', '1990-05-01', '1990-06-01', '1990-07-01', '1991-01-01', '1991-02-01', '1991-03-01', '1991-04-01', '1991-05-01', '1991-06-01', '1991-07-01', '1991-08-01', '1991-09-01', '1991-10-01', '1991-11-01', '1991-12-01', '1992-01-01', '1992-02-01', '1992-03-01', '1992-04-01', '1992-06-01', '1992-10-01', '1993-01-01', '1993-02-01', '1993-07-01', '1993-08-01', '1993-09-01', '1993-10-01', '1993-11-01', '1993-12-01', '1994-01-01', '1994-02-01', '1994-04-01', '1994-05-01', '1994-06-01', '1994-07-01', '1994-08-01', '1994-09-01', '1994-10-01', '1994-11-01', '1994-12-01', '1995-01-01', '1995-02-01', '1995-03-01', '1995-04-01', '1995-05-01', '1995-06-01', '1995-07-01', '1995-08-01', '1995-09-01', '1995-10-01', '1995-11-01', '1995-12-01', '1996-01-01', '1996-02-01', '1996-03-01', '1996-04-01', '1996-05-01', '1996-06-01', '1996-07-01', '1996-08-01', '1996-09-01', '1996-10-01', '1996-11-01', '1996-12-01', '1997-01-01', '1997-02-01', '1997-03-01', '1997-04-01', '1997-05-01', '1997-06-01', '1997-07-01', '1997-08-01', '1997-09-01', '1997-10-01', '1997-11-01', '1997-12-01', '1998-01-01', '1998-02-01', '1998-03-01', '1998-04-01', '1998-05-01', '1998-06-01', '1998-07-01', '1998-08-01', '1998-09-01', '1998-10-01', '1998-11-01', '1998-12-01', '1999-01-01', '1999-02-01', '1999-03-01', '1999-04-01', '1999-05-01', '1999-06-01', '1999-07-01', '1999-08-01', '1999-09-01', '1999-10-01', '1999-11-01', '1999-12-01', '2000-01-01', '2000-02-01', '2000-03-01', '2000-04-01', '2000-05-01', '2000-06-01', '2000-07-01', '2000-08-01', '2000-09-01', '2000-10-01', '2000-11-01', '2000-12-01', '2001-01-01', '2001-02-01', '2001-03-01', '2001-04-01', '2001-05-01', '2001-06-01', '2001-07-01', '2001-08-01', '2001-09-01', '2001-10-01', '2001-11-01', '2001-12-01', '2002-01-01', '2002-02-01', '2002-03-01', '2002-04-01', '2002-05-01', '2002-06-01', '2002-07-01', '2002-08-01', '2002-09-01', '2002-10-01', '2002-11-01', '2002-12-01', '2003-01-01', '2003-02-01', '2003-03-01', '2003-04-01', '2003-05-01', '2003-06-01', '2003-07-01', '2003-08-01', '2003-09-01', '2003-10-01', '2003-11-01', '2003-12-01', '2004-01-01', '2004-02-01', '2004-03-01', '2004-04-01', '2004-05-01', '2004-06-01', '2004-07-01', '2004-08-01', '2004-09-01', '2004-10-01', '2004-11-01', '2004-12-01', '2005-01-01', '2005-02-01', '2005-03-01', '2005-04-01', '2005-05-01', '2005-06-01', '2005-07-01', '2005-08-01', '2005-09-01', '2005-10-01', '2005-11-01', '2005-12-01', '2006-01-01', '2006-02-01', '2006-03-01', '2006-04-01', '2006-05-01', '2006-06-01', '2006-07-01', '2006-08-01', '2006-09-01', '2006-10-01', '2006-11-01', '2006-12-01', '2007-01-01', '2007-02-01', '2007-03-01', '2007-04-01', '2007-05-01', '2007-06-01', '2007-07-01', '2007-08-01', '2007-09-01', '2007-10-01', '2007-11-01', '2007-12-01', '2008-01-01', '2008-02-01', '2008-03-01', '2008-04-01', '2008-05-01', '2008-06-01', '2008-07-01', '2008-08-01', '2008-09-01', '2008-10-01', '2008-11-01', '2008-12-01', '2009-01-01', '2009-02-01', '2009-03-01', '2009-04-01', '2009-05-01', '2009-06-01', '2009-07-01', '2009-08-01', '2009-09-01', '2009-10-01', '2009-11-01', '2009-12-01', '2010-01-01', '2010-02-01', '2010-03-01', '2010-04-01', '2010-05-01', '2010-06-01', '2010-07-01', '2010-08-01', '2010-09-01', '2010-10-01', '2010-11-01', '2010-12-01', '2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01', '2011-05-01', '2011-06-01', '2011-07-01', '2011-08-01', '2011-09-01', '2011-10-01', '2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01', '2012-03-01', '2012-04-01', '2012-05-01', '2012-06-01', '2012-07-01', '2012-08-01', '2012-09-01', '2012-10-01', '2012-11-01', '2012-12-01', '2013-01-01', '2013-02-01', '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01', '2014-12-01', '2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01', '2015-05-01', '2015-06-01', '2015-07-01', '2015-08-01', '2015-09-01', '2015-10-01', '2015-11-01', '2015-12-01', '2016-01-01', '2016-02-01', '2016-03-01', '2016-04-01', '2016-05-01', '2016-06-01', '2016-07-01', '2016-08-01', '2016-09-01', '2016-10-01', '2016-11-01', '2016-12-01', '2017-01-01', '2017-02-01', '2017-03-01', '2017-04-01', '2017-05-01', '2017-06-01', '2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01', '2017-12-01', '2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01', '2018-05-01', '2018-06-01', '2018-07-01', '2018-08-01', '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01', '2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01', '2020-01-01']
  dates = dates.map(el => new Date(el))

  let registered = [1, 2, 3, 4, 13, 14, 17, 19, 25, 30, 32, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 49, 52, 53, 54, 58, 61, 62, 63, 64, 67, 69, 72, 73, 74, 77, 83, 91, 98, 103, 141, 187, 242, 266, 299, 321, 343, 353, 367, 371, 385, 393, 404, 420, 432, 440, 448, 455, 459, 472, 481, 487, 498, 506, 519, 533, 542, 553, 576, 583, 592, 602, 615, 634, 655, 676, 716, 731, 750, 774, 792, 807, 822, 836, 853, 863, 874, 897, 919, 938, 951, 963, 980, 994, 1004, 1024, 1039, 1044, 1052, 1056, 1075, 1128, 1138, 1157, 1178, 1197, 1211, 1230, 1243, 1265, 1283, 1300, 1322, 1343, 1360, 1381, 1397, 1410, 1426, 1446, 1467, 1479, 1497, 1515, 1535, 1557, 1588, 1612, 1640, 1662, 1681, 1711, 1731, 1749, 1774, 1799, 1824, 1843, 1860, 1882, 1908, 1932, 1959, 2004, 2035, 2054, 2093, 2115, 2159, 2198, 2249, 2284, 2336, 2363, 2403, 2422, 2456, 2497, 2537, 2594, 2646, 2675, 2702, 2743, 2800, 2843, 2887, 2930, 3002, 3048, 3120, 3206, 3296, 3361, 3432, 3512, 3564, 3619, 3701, 3794, 3867, 3944, 4048, 4151, 4282, 4383, 4522, 4634, 4752, 4824, 4936, 5079, 5221, 5322, 5459, 5586, 5769, 5852, 5946, 6048, 6193, 6316, 6436, 6603, 6719, 6836, 6992, 7125, 7314, 7428, 7565, 7740, 7874, 7989, 8139, 8301, 8445, 8605, 8752, 8903, 9044, 9119, 9206, 9322, 9420, 9503, 9642, 9846, 10005, 10126, 10270, 10406, 10620, 10784, 10933, 11112, 11310, 11448, 11642, 11799, 11925, 12072, 12205, 12382, 12521, 12595, 12696, 12781, 12852, 12930, 13015, 13104, 13202, 13291, 13386, 13499, 13661, 13740, 13821, 13911, 14016, 14078, 14170, 14297, 14397, 14496, 14633, 14736, 14854, 14922, 15001, 15075, 15126, 15189, 15240, 15304, 15366, 15432, 15500, 15580, 15663, 15695, 15763, 15847, 15904, 15979, 16136, 16227, 16337, 16468, 16613, 16784, 17059, 17209, 17429, 17923, 18703, 19986, 22561, 23962, 24588, 24997, 25316, 25658, 25976, 26118, 26278, 26455, 26614, 26793, 26975, 27120, 27271, 27376, 27515, 27675, 27832, 27950, 28067, 28195, 28299, 28508, 28660, 28822, 29001, 29137, 29345, 29543, 29739, 29888, 30052, 30260, 30523, 30820, 31013, 31300, 31550, 31774, 31999, 32227, 32505, 32645, 32756]
  let stopped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 8, 15, 17, 19, 26, 27, 27, 27, 27, 29, 29, 31, 33, 34, 35, 38, 42, 45, 49, 51, 53, 55, 58, 61, 63, 67, 70, 71, 72, 76, 76, 77, 78, 81, 84, 89, 92, 94, 96, 101, 102, 103, 103, 104, 105, 105, 108, 108, 110, 111, 112, 113, 113, 114, 115, 115, 116, 119, 123, 125, 131, 139, 143, 149, 153, 161, 170, 174, 177, 182, 186, 194, 202, 205, 212, 220, 229, 234, 241, 242, 246, 250, 250, 258, 263, 267, 274, 279, 285, 295, 300, 303, 310, 312, 316, 318, 323, 327, 331, 334, 337, 341, 344, 348, 348, 352, 354, 356, 359, 361, 363, 367, 377, 380, 385, 387, 392, 394, 400, 403, 406, 419, 427, 436, 444, 453, 464, 471, 484, 492, 506, 512, 523, 534, 540, 545, 559, 565, 576, 586, 598, 607, 620, 634, 643, 659, 664, 674, 681, 684, 691, 698, 703, 707, 711, 724, 727, 729, 731, 731]
  let stopping
  let data = [registered, stopped, stopping]
  data = data.map((el, i) => { return {
    y: el,
    x: dates,
    stackgroup: 'first',
    name: status[i]
  }})

  let layout = {
    title: 'Кількість ОСББ за датою реєстрації та припинення діяльності',
    height: 600,
    autosize: true,
    legend: {
      orientation: 'h'
    }
  }


  Plotly.newPlot('byDate', data, layout)

}

let sexByDate = () => {
  let dates = ['1990-01-01', '1990-04-01', '1990-05-01', '1990-06-01', '1990-07-01', '1991-01-01', '1991-02-01', '1991-03-01', '1991-04-01', '1991-05-01', '1991-06-01', '1991-07-01', '1991-08-01', '1991-09-01', '1991-10-01', '1991-11-01', '1991-12-01', '1992-01-01', '1992-02-01', '1992-03-01', '1992-04-01', '1992-06-01', '1992-10-01', '1993-01-01', '1993-02-01', '1993-07-01', '1993-08-01', '1993-09-01', '1993-10-01', '1993-11-01', '1993-12-01', '1994-01-01', '1994-02-01', '1994-04-01', '1994-05-01', '1994-06-01', '1994-07-01', '1994-08-01', '1994-09-01', '1994-10-01', '1994-11-01', '1994-12-01', '1995-01-01', '1995-02-01', '1995-03-01', '1995-04-01', '1995-05-01', '1995-06-01', '1995-07-01', '1995-08-01', '1995-09-01', '1995-10-01', '1995-11-01', '1995-12-01', '1996-01-01', '1996-02-01', '1996-03-01', '1996-04-01', '1996-05-01', '1996-06-01', '1996-07-01', '1996-08-01', '1996-09-01', '1996-10-01', '1996-11-01', '1996-12-01', '1997-01-01', '1997-02-01', '1997-03-01', '1997-04-01', '1997-05-01', '1997-06-01', '1997-07-01', '1997-08-01', '1997-09-01', '1997-10-01', '1997-11-01', '1997-12-01', '1998-01-01', '1998-02-01', '1998-03-01', '1998-04-01', '1998-05-01', '1998-06-01', '1998-07-01', '1998-08-01', '1998-09-01', '1998-10-01', '1998-11-01', '1998-12-01', '1999-01-01', '1999-02-01', '1999-03-01', '1999-04-01', '1999-05-01', '1999-06-01', '1999-07-01', '1999-08-01', '1999-09-01', '1999-10-01', '1999-11-01', '1999-12-01', '2000-01-01', '2000-02-01', '2000-03-01', '2000-04-01', '2000-05-01', '2000-06-01', '2000-07-01', '2000-08-01', '2000-09-01', '2000-10-01', '2000-11-01', '2000-12-01', '2001-01-01', '2001-02-01', '2001-03-01', '2001-04-01', '2001-05-01', '2001-06-01', '2001-07-01', '2001-08-01', '2001-09-01', '2001-10-01', '2001-11-01', '2001-12-01', '2002-01-01', '2002-02-01', '2002-03-01', '2002-04-01', '2002-05-01', '2002-06-01', '2002-07-01', '2002-08-01', '2002-09-01', '2002-10-01', '2002-11-01', '2002-12-01', '2003-01-01', '2003-02-01', '2003-03-01', '2003-04-01', '2003-05-01', '2003-06-01', '2003-07-01', '2003-08-01', '2003-09-01', '2003-10-01', '2003-11-01', '2003-12-01', '2004-01-01', '2004-02-01', '2004-03-01', '2004-04-01', '2004-05-01', '2004-06-01', '2004-07-01', '2004-08-01', '2004-09-01', '2004-10-01', '2004-11-01', '2004-12-01', '2005-01-01', '2005-02-01', '2005-03-01', '2005-04-01', '2005-05-01', '2005-06-01', '2005-07-01', '2005-08-01', '2005-09-01', '2005-10-01', '2005-11-01', '2005-12-01', '2006-01-01', '2006-02-01', '2006-03-01', '2006-04-01', '2006-05-01', '2006-06-01', '2006-07-01', '2006-08-01', '2006-09-01', '2006-10-01', '2006-11-01', '2006-12-01', '2007-01-01', '2007-02-01', '2007-03-01', '2007-04-01', '2007-05-01', '2007-06-01', '2007-07-01', '2007-08-01', '2007-09-01', '2007-10-01', '2007-11-01', '2007-12-01', '2008-01-01', '2008-02-01', '2008-03-01', '2008-04-01', '2008-05-01', '2008-06-01', '2008-07-01', '2008-08-01', '2008-09-01', '2008-10-01', '2008-11-01', '2008-12-01', '2009-01-01', '2009-02-01', '2009-03-01', '2009-04-01', '2009-05-01', '2009-06-01', '2009-07-01', '2009-08-01', '2009-09-01', '2009-10-01', '2009-11-01', '2009-12-01', '2010-01-01', '2010-02-01', '2010-03-01', '2010-04-01', '2010-05-01', '2010-06-01', '2010-07-01', '2010-08-01', '2010-09-01', '2010-10-01', '2010-11-01', '2010-12-01', '2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01', '2011-05-01', '2011-06-01', '2011-07-01', '2011-08-01', '2011-09-01', '2011-10-01', '2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01', '2012-03-01', '2012-04-01', '2012-05-01', '2012-06-01', '2012-07-01', '2012-08-01', '2012-09-01', '2012-10-01', '2012-11-01', '2012-12-01', '2013-01-01', '2013-02-01', '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01', '2014-12-01', '2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01', '2015-05-01', '2015-06-01', '2015-07-01', '2015-08-01', '2015-09-01', '2015-10-01', '2015-11-01', '2015-12-01', '2016-01-01', '2016-02-01', '2016-03-01', '2016-04-01', '2016-05-01', '2016-06-01', '2016-07-01', '2016-08-01', '2016-09-01', '2016-10-01', '2016-11-01', '2016-12-01', '2017-01-01', '2017-02-01', '2017-03-01', '2017-04-01', '2017-05-01', '2017-06-01', '2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01', '2017-12-01', '2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01', '2018-05-01', '2018-06-01', '2018-07-01', '2018-08-01', '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01', '2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01', '2020-01-01']
  dates = dates.map(el => new Date(el))

  let women = [1, 2, 3, 3, 8, 8, 10, 12, 17, 20, 21, 23, 24, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31, 33, 34, 34, 37, 39, 39, 40, 41, 44, 45, 47, 47, 48, 49, 53, 57, 64, 68, 85, 115, 147, 159, 179, 196, 209, 215, 223, 225, 232, 235, 245, 253, 261, 267, 270, 275, 278, 287, 293, 295, 303, 308, 318, 325, 332, 339, 352, 358, 361, 365, 377, 384, 396, 405, 427, 434, 445, 456, 467, 473, 481, 487, 495, 496, 503, 513, 528, 540, 546, 553, 564, 571, 576, 588, 598, 601, 606, 608, 618, 649, 651, 661, 672, 682, 688, 698, 707, 720, 728, 732, 744, 753, 761, 777, 780, 787, 794, 809, 818, 824, 835, 841, 846, 858, 872, 882, 896, 909, 919, 934, 942, 947, 961, 974, 993, 1006, 1013, 1026, 1037, 1049, 1063, 1085, 1106, 1122, 1140, 1149, 1171, 1191, 1212, 1230, 1269, 1281, 1304, 1316, 1334, 1361, 1382, 1413, 1439, 1454, 1467, 1491, 1519, 1543, 1570, 1590, 1628, 1650, 1685, 1738, 1779, 1822, 1864, 1906, 1928, 1957, 2000, 2055, 2099, 2148, 2206, 2268, 2343, 2399, 2482, 2537, 2598, 2637, 2696, 2773, 2856, 2911, 2985, 3064, 3163, 3196, 3241, 3286, 3370, 3434, 3508, 3613, 3670, 3746, 3834, 3909, 4026, 4100, 4181, 4271, 4340, 4411, 4500, 4596, 4679, 4772, 4863, 4954, 5028, 5070, 5123, 5182, 5239, 5284, 5365, 5491, 5576, 5644, 5725, 5807, 5922, 6009, 6090, 6196, 6299, 6377, 6508, 6596, 6673, 6744, 6813, 6920, 6990, 7032, 7090, 7141, 7186, 7235, 7278, 7336, 7393, 7446, 7504, 7577, 7684, 7725, 7772, 7812, 7860, 7899, 7952, 8022, 8082, 8137, 8200, 8257, 8317, 8351, 8395, 8444, 8481, 8517, 8546, 8579, 8608, 8647, 8677, 8712, 8759, 8776, 8811, 8858, 8892, 8933, 9012, 9063, 9122, 9198, 9290, 9379, 9527, 9601, 9717, 9988, 10362, 11047, 12391, 13114, 13464, 13665, 13844, 14018, 14196, 14274, 14355, 14447, 14528, 14631, 14733, 14813, 14889, 14942, 15011, 15102, 15186, 15249, 15298, 15372, 15426, 15545, 15649, 15740, 15835, 15915, 16042, 16158, 16261, 16338, 16437, 16551, 16671, 16782, 16879, 17030, 17154, 17270, 17395, 17519, 17677, 17739]
  let men = [0, 0, 0, 1, 5, 6, 7, 7, 8, 10, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 17, 18, 18, 19, 19, 20, 21, 22, 23, 23, 23, 23, 24, 25, 26, 26, 28, 30, 34, 34, 35, 56, 71, 94, 106, 119, 124, 133, 137, 143, 145, 152, 157, 158, 166, 170, 172, 177, 179, 180, 184, 187, 191, 194, 197, 200, 207, 209, 213, 223, 224, 230, 236, 237, 249, 258, 268, 286, 294, 301, 313, 320, 328, 335, 343, 352, 361, 365, 376, 382, 388, 395, 400, 406, 413, 418, 426, 431, 433, 436, 438, 447, 469, 477, 486, 495, 502, 510, 519, 523, 532, 541, 554, 562, 573, 582, 587, 600, 606, 615, 620, 632, 638, 645, 657, 672, 681, 697, 711, 723, 732, 741, 756, 767, 780, 791, 801, 807, 813, 822, 831, 846, 858, 871, 894, 904, 907, 927, 939, 960, 979, 995, 1012, 1025, 1039, 1056, 1063, 1079, 1093, 1111, 1137, 1163, 1178, 1192, 1210, 1240, 1259, 1276, 1299, 1333, 1358, 1395, 1427, 1476, 1498, 1527, 1565, 1596, 1624, 1663, 1701, 1731, 1760, 1806, 1847, 1910, 1957, 2015, 2080, 2138, 2171, 2224, 2290, 2351, 2397, 2462, 2512, 2597, 2648, 2703, 2765, 2829, 2894, 2942, 3006, 3067, 3111, 3183, 3244, 3321, 3364, 3422, 3508, 3578, 3622, 3684, 3751, 3815, 3885, 3947, 4010, 4080, 4116, 4155, 4214, 4257, 4297, 4357, 4438, 4512, 4570, 4635, 4692, 4792, 4872, 4950, 5023, 5120, 5182, 5245, 5316, 5369, 5449, 5516, 5594, 5673, 5709, 5759, 5797, 5832, 5871, 5919, 5955, 6002, 6043, 6089, 6139, 6199, 6244, 6287, 6347, 6410, 6444, 6487, 6550, 6597, 6645, 6728, 6783, 6846, 6891, 6931, 6965, 6990, 7024, 7049, 7090, 7126, 7161, 7203, 7255, 7303, 7324, 7361, 7404, 7434, 7472, 7558, 7600, 7655, 7712, 7769, 7856, 7988, 8067, 8175, 8408, 8817, 9420, 10653, 11337, 11615, 11830, 11975, 12146, 12307, 12384, 12476, 12570, 12658, 12745, 12833, 12918, 13001, 13069, 13148, 13232, 13318, 13380, 13455, 13527, 13585, 13687, 13746, 13832, 13925, 13999, 14095, 14190, 14300, 14378, 14458, 14559, 14705, 14898, 15002, 15154, 15285, 15399, 15521, 15635, 15762, 15843]
 
  let data = [women, men]
  data = data.map((el, i) => { return {
    y: el,
    x: dates,
    stackgroup: 'first',
    name: sex[i]
  }})

  let layout = {
    title: 'Кількість ОСББ за статтю керівника',
    height: 600,
    autosize: true,
    legend: {
      orientation: 'h'
    }
  }


  Plotly.newPlot('sexByDate', data, layout)

}

let byStatus = () => {
  let amount = [32982, 731, 256, 135].reverse()
  let data = [amount]
  data = data.map((el, i) => { return {
    x: el,
    y: status.reverse(),
    orientation: 'h',
    type: 'bar'
  }})

  let layout = {
    title: 'Розподіл ОСББ за станом реєстрації',
    barmode: 'stack',
    height: 600,
    autosize: true,
    legend: {
      orientation: 'h'
    },
    margin: {
      autoexpand: true,
      l: 200,
      r: 120,
      t: 100
    }
  }

  Plotly.newPlot('byStatus', data, layout)
}

let byLocalityTypes = () => {
  let amount = [31245, 1508, 1207, 140].reverse()
  let data = [amount]
  data = data.map((el, i) => { return {
    x: el,
    y: localityTypes.reverse(),
    orientation: 'h',
    type: 'bar'
  }})

  let layout = {
    title: 'Розподіл ОСББ за типом населеного пункту',
    barmode: 'stack',
    height: 600,
    autosize: true,
    legend: {
      orientation: 'h'
    },
    margin: {
      autoexpand: true,
      l: 200,
      r: 120,
      t: 100
    }
  }

  Plotly.newPlot('byLocalityTypes', data, layout)
}

let byLiveYears = () => {
  let labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21].reverse()
  let amount = [37, 106, 76, 56, 53, 49, 41, 39, 42, 18, 24, 20, 15, 8, 5, 3, 6, 2, 4, 3, 1, 3].reverse()
  let data = [amount]
  data = data.map((el, i) => { return {
    x: el,
    y: labels,
    orientation: 'h',
    type: 'bar'
  }})

  let layout = {
    title: 'Вік ОСББ на момент припинення своєї діяльності',
    barmode: 'stack',
    height: 600,
    autosize: true,
    legend: {
      orientation: 'h'
    },
    margin: {
      autoexpand: true,
      l: 200,
      r: 120,
      t: 100
    }
  }

  Plotly.newPlot('byLiveYears', data, layout)
}

byRegionPlot()
byDate()
sexByDate()
byStatus()
byLocalityTypes()
byLiveYears()

*/